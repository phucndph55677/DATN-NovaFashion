    @extends('admin.layouts.app')

    @section('title', 'B·∫£ng ƒëi·ªÅu khi·ªÉn')

    @section('content')
        <div class="container-fluid">
            <!-- Spinner khi loading -->
            <div id="loadingSpinner" class="text-center my-5 d-none">
                <div class="spinner-border text-primary spinner-border-lg" role="status">
                    <span class="visually-hidden">ƒêang t·∫£i...</span>
                </div>
                <p class="mt-2 fw-bold text-primary">ƒêang t·∫£i d·ªØ li·ªáu, vui l√≤ng ch·ªù...</p>
            </div>
            <!-- B·ªô l·ªçc d·ªØ li·ªáu -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h4 class="fw-bold">B·∫£ng ƒëi·ªÅu khi·ªÉn</h4>
                    <p class="text-muted">
                        D·ªØ li·ªáu t·ª´ {{ $startDateFormatted }} ƒë·∫øn {{ $endDateFormatted }}
                    </p>
                </div>
                <form id="filterForm" action="{{ route('admin.dashboards.index') }}" method="GET"
                    class="d-flex gap-2 align-items-center  ">
                    {{-- Ki·ªÉu l·ªçc --}}
                    <select name="filter_type" id="filter_type" class="form-select form-select-sm w-auto">
                        <option value="" disabled selected>-- Ch·ªçn ki·ªÉu l·ªçc --</option>
                        <option value="day" {{ request('filter_type') == 'day' ? 'selected' : '' }}>Theo ng√†y</option>
                        <option value="month" {{ request('filter_type') == 'month' ? 'selected' : '' }}>Theo th√°ng</option>
                        <option value="year" {{ request('filter_type') == 'year' ? 'selected' : '' }}>Theo nƒÉm</option>
                        <option value="quarter" {{ request('filter_type') == 'quarter' ? 'selected' : '' }}>Theo qu√Ω
                        </option>
                    </select>

                    {{-- Input l·ªçc ƒë·ªông --}}
                    <div id="filter-inputs" class="d-flex gap-2 align-items-center">
                        {{-- Theo th√°ng --}}
                        <input type="month" name="month" class="form-control form-control-sm w-auto d-none"
                            value="{{ request('month', now()->format('Y-m')) }}">

                        {{-- Theo nƒÉm --}}
                        <input type="number" name="year" class="form-control form-control-sm w-auto d-none"
                            value="{{ request('year', now()->year) }}" placeholder="Nh·∫≠p nƒÉm">

                        {{-- Theo qu√Ω --}}
                        <select name="quarter" class="form-select form-select-sm w-auto d-none">
                            <option value="1" {{ request('quarter') == 1 ? 'selected' : '' }}>Qu√Ω 1</option>
                            <option value="2" {{ request('quarter') == 2 ? 'selected' : '' }}>Qu√Ω 2</option>
                            <option value="3" {{ request('quarter') == 3 ? 'selected' : '' }}>Qu√Ω 3</option>
                            <option value="4" {{ request('quarter') == 4 ? 'selected' : '' }}>Qu√Ω 4</option>
                        </select>
                        <input type="number" name="year_quarter" class="form-control form-control-sm w-auto d-none"
                            value="{{ request('year_quarter', now()->year) }}" placeholder="NƒÉm cho qu√Ω">

                        {{-- Theo ng√†y --}}
                        <input type="date" name="start_date" class="form-control form-control-sm d-none"
                            value="{{ request('start_date', now()->startOfMonth()->format('Y-m-d')) }}">
                        <input type="date" name="end_date" class="form-control form-control-sm d-none"
                            value="{{ request('end_date', now()->endOfMonth()->format('Y-m-d')) }}">
                    </div>
                    <button type="submit" class="btn btn-primary btn-sm">L·ªçc</button>
                    <a href="{{ route('admin.dashboards.index') }}"
                        class="btn btn-outline-primary btn-sm text-nowrap py-2">
                        Th√°ng hi·ªán t·∫°i
                    </a>
                </form>
            </div>

            <!-- Modal hi·ªÉn th·ªã l·ªói validate -->
            <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content border-success">
                        <div class="modal-header bg-danger text-white">
                            <h5 class="modal-title" id="errorModalLabel">‚ö†Ô∏è L·ªói</h5>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                aria-label="ƒê√≥ng"></button>
                        </div>
                        <div class="modal-body fw-bold text-danger" id="errorModalText">
                            <!-- N·ªôi dung l·ªói s·∫Ω ƒë∆∞·ª£c ch√®n b·∫±ng JS -->
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ƒê√≥ng</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- T·ªïng quan -->
            <div class="row mb-4">
                @foreach ($overview as $item)
                    <div class="col-md-3">
                        <div class="card text-center p-3">
                            <h5 class="fw-bold text-dark">{{ $item['label'] }}</h5>
                            <h5>{{ $item['value'] }}</h5>
                        </div>
                    </div>
                @endforeach
            </div>

            <!-- Bi·ªÉu ƒë·ªì -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="fw-bold mb-0">üìä Bi·ªÉu ƒë·ªì th·ªëng k√™</h4>
                        <div class="mb-3">
                            <label for="chartSelector" class="form-label fw-bold">Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì</label>
                            <select id="chartSelector" class="form-select w-auto d-inline-block">
                                <option value="revenue">üìà T·ªïng Doanh thu</option>
                                <option value="profit">üìà Doanh thu th·ª±c nh·∫≠n</option>
                                <option value="users">üë• Ng∆∞·ªùi d√πng</option>
                                <option value="products">ü•á Top s·∫£n ph·∫©m b√°n ch·∫°y</option>
                                <option value="leastProducts">üìâ Top s·∫£n ph·∫©m b√°n ch·∫≠m</option>
                                <option value="orderStatuses">üì¶ Tr·∫°ng th√°i ƒë∆°n h√†ng</option>
                            </select>

                            <!-- Select s·ªë l∆∞·ª£ng s·∫£n ph·∫©m -->
                            <select id="topProductLimit" class="form-select w-auto d-inline-block d-none">
                                <option value="5" selected>Top 5</option>
                                <option value="10">Top 10</option>
                                <option value="15">Top 15</option>
                                <option value="20">Top 20</option>
                                <option value="50">Top 50</option>
                            </select>

                            <!-- Select s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ch·∫≠m -->
                            <select id="leastProductLimit" class="form-select w-auto d-inline-block d-none">
                                <option value="5" selected>Top 5</option>
                                <option value="10">Top 10</option>
                                <option value="15">Top 15</option>
                                <option value="20">Top 20</option>
                                <option value="50">Top 50</option>
                            </select>
                        </div>
                    </div>
                    <!-- Th√¥ng b√°o khi kh√¥ng c√≥ d·ªØ li·ªáu -->
                    <div id="noChartDataMessage" class="alert alert-warning text-center d-none" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã cho bi·ªÉu ƒë·ªì n√†y.
                    </div>
                    {{-- Canvas chart --}}
                    <div style="width: 100%; height: 70vh;"> <!-- ho·∫∑c height: 100%; t√πy b·∫°n -->
                        <canvas id="chartCanvas" style="width: 100% !important; height: 100% !important;"></canvas>
                    </div>
                </div>
            </div>

            <!-- ƒê∆°n h√†ng g·∫ßn ƒë√¢y -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="fw-bold">ƒê∆°n h√†ng m·ªõi nh·∫•t</h5>
                    <br>
                    @if ($recentOrders->count())
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>M√£ ƒë∆°n h√†ng</th>
                                        <th>Kh√°ch h√†ng</th>
                                        <th>T·ªïng ti·ªÅn</th>
                                        <th>Th·ªùi gian</th>

                                        <th>Tr·∫°ng th√°i ƒë∆°n h√†ng</th>
                                        <th>Tr·∫°ng th√°i thanh to√°n</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($recentOrders as $order)
                                        <tr>
                                            <td>{{ $order->order_code }}</td>
                                            <td>{{ $order->name }}</td>
                                            <td>{{ number_format($order->total_amount, 0, ',', '.') }} VND</td>
                                            <td>{{ $order->created_at->format('d/m/Y H:i') }}</td>
                                            <td>
                                                <span class="badge bg-primary">
                                                    {{ $order->orderStatus->name ?? 'Kh√¥ng x√°c ƒë·ªãnh' }}
                                                </span>
                                            </td>
                                            <td>
                                                @if ($order->paymentStatus)
                                                    @if ($order->paymentStatus->name === 'ƒê√£ thanh to√°n')
                                                        <span class="badge bg-success">ƒê√£ thanh to√°n</span>
                                                    @elseif ($order->paymentStatus->name === 'Ch∆∞a thanh to√°n')
                                                        <span class="badge bg-warning text-dark">Ch∆∞a thanh to√°n</span>
                                                    @else
                                                        <span
                                                            class="badge bg-secondary">{{ $order->paymentStatus->name }}</span>
                                                    @endif
                                                @else
                                                    <span class="text-muted">Kh√¥ng x√°c ƒë·ªãnh</span>
                                                @endif
                                            </td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    @else
                        <p class="text-muted text-center">Kh√¥ng c√≥ ƒë∆°n h√†ng trong kho·∫£ng th·ªùi gian n√†y.</p>
                    @endif
                </div>
            </div>

            <!-- Ng∆∞·ªùi d√πng m·ªõi -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="fw-bold">Ng∆∞·ªùi d√πng m·ªõi</h5>
                    <br>
                    @if ($newCustomers->count())
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>H·ªç t√™n</th>
                                        <th>Email</th>
                                        <th>Vai tr√≤</th>
                                        <th>Ng√†y ƒëƒÉng k√Ω</th>
                                        <th>Tr·∫°ng th√°i</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($newCustomers as $user)
                                        <tr>
                                            <td>{{ $user->name }}</td>
                                            <td>{{ $user->email }}</td>
                                            <td>
                                                @if ($user->role === 'admin')
                                                    <span class="badge bg-primary">Admin</span>
                                                @else
                                                    <span class="badge bg-secondary">User</span>
                                                @endif
                                            </td>
                                            <td>{{ $user->created_at->format('d/m/Y H:i') }}</td>
                                            <td>
                                                @if ($user->status == 1)
                                                    <span class="badge bg-success">ƒêang ho·∫°t ƒë·ªông</span>
                                                @else
                                                    <span class="badge bg-secondary">Ng·ª´ng ho·∫°t ƒë·ªông</span>
                                                @endif
                                            </td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    @else
                        <p class="text-muted text-center">Kh√¥ng c√≥ ng∆∞·ªùi d√πng m·ªõi trong kho·∫£ng th·ªùi gian n√†y.</p>
                    @endif
                </div>
            </div>

            <!-- Kh√°ch h√†ng h√†ng ƒë·∫ßu -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="fw-bold">Kh√°ch h√†ng h√†ng ƒë·∫ßu</h5>
                    <br>
                    @if ($topUsers->count())
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>H·ªç t√™n</th>
                                        <th>Email</th>
                                        <th>S·ªë ƒë∆°n h√†ng</th>
                                        <th>T·ªïng ti·ªÅn</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($topUsers as $user)
                                        <tr>
                                            <td>{{ $user->name }}</td>
                                            <td>{{ $user->email }}</td>
                                            <td>{{ $user->total_orders }}</td>
                                            <td>{{ number_format($user->total_amount, 0, ',', '.') }} VND</td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    @else
                        <p class="text-muted text-center">Kh√¥ng c√≥ kh√°ch h√†ng n·ªïi b·∫≠t trong kho·∫£ng th·ªùi gian n√†y.</p>
                    @endif
                </div>
            </div>

        </div>
    @endsection

    @section('scripts')
        <!-- Chart.js -->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <script>
            // ================= CHART CONFIG & DATA =================
            const chartData = {
                revenue: {
                    labels: @json($labels),
                    data: @json($data),
                    label: "Doanh thu (VND)",
                    type: "line",
                    backgroundColor: "rgba(75, 192, 192, 0.2)",
                    borderColor: "rgba(75, 192, 192, 1)",
                    fill: true
                },
                products: {
                    labels: @json($productLabels),
                    data: @json($productData),
                    label: "S·ªë s·∫£n ph·∫©m b√°n ƒë∆∞·ª£c",
                    type: "bar",
                    backgroundColor: "rgba(54, 162, 235, 0.7)",
                    borderColor: "rgba(54, 162, 235, 1)",
                    fill: false
                },
                profit: {
                    labels: @json($profitLabels ?? $labels),
                    data: @json($profitValues),
                    label: "Doanh thu th·ª±c nh·∫≠n (VND)",
                    type: "line",
                    backgroundColor: "rgba(34, 197, 94, 0.2)",
                    borderColor: "rgba(34, 197, 94, 1)",
                    fill: true
                },
                users: {
                    labels: @json($userLabels),
                    data: @json($userData),
                    label: "Ng∆∞·ªùi d√πng m·ªõi",
                    type: "line",
                    backgroundColor: "rgba(255, 99, 132, 0.2)",
                    borderColor: "rgba(255, 99, 132, 1)",
                    fill: true
                },
                orderStatuses: {
                    labels: @json($orderStatusLabels),
                    data: @json($orderStatusData),
                    label: "T·ª∑ l·ªá ƒë∆°n h√†ng",
                    type: "pie",
                    backgroundColor: [
                        "rgba(255, 99, 132, 0.7)",
                        "rgba(54, 162, 235, 0.7)",
                        "rgba(255, 206, 86, 0.7)",
                        "rgba(75, 192, 192, 0.7)",
                        "rgba(153, 102, 255, 0.7)",
                        "rgba(255, 159, 64, 0.7)",
                        "rgba(199, 199, 199, 0.7)",
                        "rgba(255, 105, 180, 0.7)",
                        "rgba(60, 179, 113, 0.7)",
                        "rgba(123, 104, 238, 0.7)"
                    ],
                    borderColor: "rgba(255, 255, 255, 1)",
                    fill: false
                },
                leastProducts: {
                    labels: @json($leastProductLabels),
                    data: @json($leastProductData),
                    label: "S·ªë s·∫£n ph·∫©m b√°n ƒë∆∞·ª£c",
                    type: "bar",
                    backgroundColor: "rgba(255, 99, 132, 0.7)",
                    borderColor: "rgba(255, 99, 132, 1)",
                    fill: false
                }
            };

            const ctx = document.getElementById('chartCanvas').getContext('2d'); // L·∫•y context c·ªßa canvas ƒë·ªÉ v·∫Ω Chart.js
            let currentChart; // Bi·∫øn l∆∞u chart hi·ªán t·∫°i (ƒë·ªÉ h·ªßy khi v·∫Ω chart m·ªõi)
            let currentType = null; // Bi·∫øn l∆∞u lo·∫°i chart ƒëang hi·ªÉn th·ªã

            // T·∫°o formatter cho tooltip d·ª±a theo lo·∫°i chart
            const tooltipFormatters = {
                products: (label, value) => `${label}: ${value} s·∫£n ph·∫©m`,
                leastProducts: (label, value) => `${label}: ${value} s·∫£n ph·∫©m`,
                orderStatuses: (label, value, dataset) => { // chart pie tr·∫°ng th√°i ƒë∆°n h√†ng
                    const total = dataset.reduce((a, b) => a + b, 0) || 0; // t·ªïng s·ªë ƒë∆°n
                    const percent = total ? ((value / total) * 100).toFixed(1) : 0; // ph·∫ßn trƒÉm
                    return `${label}: ${value} ƒë∆°n (${percent}%)`;
                },
                revenue: (label, value) =>
                    `${label}: ${Number(value).toLocaleString("vi-VN", { maximumFractionDigits: 0 })} VND`,
                profit: (label, value) =>
                    `${label}: ${Number(value).toLocaleString("vi-VN", { maximumFractionDigits: 0 })} VND`,
            };

            // H√†m ƒë·ªãnh d·∫°ng tooltip d·ª±a theo lo·∫°i chart
            function formatTooltip(type, context) {
                const value = context.parsed.y ?? context.parsed; // l·∫•y gi√° tr·ªã y
                const label = context.label; // nh√£n tr·ª•c x
                const dataset = context.dataset.data; // d·ªØ li·ªáu dataset
                return tooltipFormatters[type]?.(label, value, dataset) ?? context.formattedValue; // tr·∫£ tooltip
            }

            // H√†m ƒë·ªãnh d·∫°ng tr·ª•c y (n·∫øu l√† ti·ªÅn th√¨ th√™m VND, n·∫øu l√† s·ªë th√¨ nguy√™n)
            function formatYAxis(type, value) {
                if (type === 'revenue' || type === 'profit') {
                    return value.toLocaleString('vi-VN') + ' VND';
                }
                return Number.isInteger(value) ? value : null;
            }

            // C·∫•u h√¨nh c∆° b·∫£n chung cho t·∫•t c·∫£ chart
            const baseOptions = {
                responsive: true, // responsive theo k√≠ch th∆∞·ªõc
                maintainAspectRatio: false, // kh√¥ng gi·ªØ t·ªâ l·ªá c·ªë ƒë·ªãnh
                layout: {
                    padding: 20
                },
                plugins: {
                    legend: {
                        display: true,
                        align: 'center',
                        labels: {
                            usePointStyle: true,
                            padding: 20,
                            boxWidth: 15
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: (ctx) => formatTooltip(currentType, ctx) // g·ªçi h√†m tooltip
                        }
                    }
                }
            };

            // ================= H√ÄM HI·ªÇN TH·ªä/·∫®N CHART =================
            function toggleChartVisibility(hasData) {
                const chartCanvas = document.getElementById('chartCanvas');
                const noDataMessage = document.getElementById('noChartDataMessage');
                chartCanvas.style.display = hasData ? 'block' : 'none'; // hi·ªÉn th·ªã canvas n·∫øu c√≥ d·ªØ li·ªáu
                noDataMessage.classList.toggle('d-none', hasData); // hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
            }

            // ================= H√ÄM RENDER CHART =================
            function renderChart(type) {
                if (currentChart) currentChart.destroy(); // x√≥a chart c≈© n·∫øu t·ªìn t·∫°i
                currentType = type; // c·∫≠p nh·∫≠t lo·∫°i chart hi·ªán t·∫°i

                const hasData = chartData[type].data?.some(v => v > 0); // ki·ªÉm tra c√≥ d·ªØ li·ªáu > 0 kh√¥ng
                toggleChartVisibility(hasData); // n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th√¨ d·ª´ng
                if (!hasData) return;

                // C·∫•u h√¨nh chart
                const chartConfig = {
                    type: chartData[type].type,
                    data: {
                        labels: chartData[type].labels,
                        datasets: [{
                            ...chartData[type],
                            tension: chartData[type].type === 'line' ? 0.3 : 0
                        }]
                    },
                    options: {
                        ...baseOptions,
                        plugins: {
                            ...baseOptions.plugins,
                            legend: {
                                ...baseOptions.plugins.legend,
                                position: chartData[type].type === 'pie' ? 'bottom' : 'top'
                            }
                        }
                    }
                };

                // N·∫øu kh√¥ng ph·∫£i pie chart, th√™m c·∫•u h√¨nh tr·ª•c x, y
                if (chartData[type].type !== 'pie') {
                    chartConfig.options.scales = {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0,
                                callback: (value) => formatYAxis(type, value)
                            }
                        },
                        x: {
                            ticks: {
                                autoSkip: false,
                                maxRotation: 45,
                                minRotation: 0
                            }
                        }
                    };
                }
                currentChart = new Chart(ctx, chartConfig); // Kh·ªüi t·∫°o chart
            }

            // ================= VALIDATE FORM =================
            function validateFilter(filterType, values) {
                if (!filterType) return "‚ùå Vui l√≤ng ch·ªçn ki·ªÉu l·ªçc.";
                const {
                    month,
                    year,
                    quarter,
                    yearQuarter,
                    start,
                    end
                } = values;
                switch (filterType) {
                    case "month":
                        return !month && "‚ùå Vui l√≤ng ch·ªçn th√°ng.";
                    case "year":
                        return !year && "‚ùå Vui l√≤ng ch·ªçn nƒÉm.";
                    case "quarter":
                        return (!quarter || !yearQuarter) && "‚ùå Vui l√≤ng ch·ªçn qu√Ω v√† nƒÉm cho l·ªçc theo qu√Ω.";
                    case "day":
                        if (!start || !end) return "‚ùå Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.";
                        if (start > end) return "‚ùå Ng√†y b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n ng√†y k·∫øt th√∫c.";
                        return null;
                    default:
                        return null;
                }
            }

            // ================= H√ÄM HI·ªÇN TH·ªä L·ªñI =================
            function showError(message) {
                document.getElementById('errorModalText').innerText = message; // ch√®n message v√†o modal
                let modal = new bootstrap.Modal(document.getElementById('errorModal'));
                modal.show(); // hi·ªÉn th·ªã modal l·ªói
            }

            // ================= DOM READY =================
            document.addEventListener("DOMContentLoaded", function() {
                const chartSelector = document.getElementById("chartSelector");
                const topProductLimit = document.getElementById("topProductLimit");
                const leastProductLimit = document.getElementById("leastProductLimit");
                const filterType = document.getElementById("filter_type");

                // map lo·∫°i chart v·ªõi limit selector t∆∞∆°ng ·ª©ng
                const limitSelectors = {
                    products: topProductLimit,
                    leastProducts: leastProductLimit
                };

                // Thay ƒë·ªïi select chart: show/hide limit selectors
                chartSelector.addEventListener("change", function() {
                    Object.values(limitSelectors).forEach(el => el.classList.add("d-none"));
                    if (limitSelectors[this.value]) {
                        limitSelectors[this.value].classList.remove("d-none");
                    }
                });

                // ================= FETCH D·ªÆ LI·ªÜU S·∫¢N PH·∫®M =================
                async function fetchProducts(limit, type = "products") {
                    let url =
                        `{{ route('admin.dashboards.index') }}?filter_type={{ request('filter_type') }}&limit=${limit}${type==="leastProducts" ? "&type=least" : ""}`;
                    try {
                        const res = await fetch(url, {
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        const data = await res.json();
                        chartData[type].labels = data.labels;
                        chartData[type].data = data.data;
                        renderChart(type);
                    } catch (err) {
                        console.error("L·ªói khi fetch d·ªØ li·ªáu:", err);
                    }
                }

                // Thay ƒë·ªïi limit select => fetch l·∫°i d·ªØ li·ªáu
                [topProductLimit, leastProductLimit].forEach(selectEl => {
                    selectEl.addEventListener("change", e => {
                        const type = e.target.id === "topProductLimit" ? "products" : "leastProducts";
                        fetchProducts(e.target.value, type);
                    });
                });

                // toggle filter inputs
                const inputs = {
                    month: document.querySelector("input[name='month']"),
                    year: document.querySelector("input[name='year']"),
                    quarter: document.querySelector("select[name='quarter']"),
                    year_quarter: document.querySelector("input[name='year_quarter']"),
                    start_date: document.querySelector("input[name='start_date']"),
                    end_date: document.querySelector("input[name='end_date']")
                };

                // Nh√≥m input theo lo·∫°i l·ªçc
                const inputGroups = {
                    month: ["month"],
                    year: ["year"],
                    quarter: ["quarter", "year_quarter"],
                    day: ["start_date", "end_date"],
                };

                function toggleInputs(type) {
                    const active = inputGroups[type] || [];
                    Object.entries(inputs).forEach(([key, el]) => {
                        el.classList.toggle("d-none", !active.includes(key));
                    });
                }

                toggleInputs(filterType.value);
                filterType.addEventListener("change", function() {
                    toggleInputs(this.value);
                });

                // Render chart m·∫∑c ƒë·ªãnh
                renderChart(chartSelector.value);
                chartSelector.addEventListener('change', function() {
                    renderChart(this.value);
                });

                // validate form khi submit
                document.getElementById('filterForm').addEventListener('submit', function(e) {
                    const filterType = document.getElementById("filter_type").value;
                    const month = document.querySelector('input[name="month"]').value;
                    const year = document.querySelector('input[name="year"]').value;
                    const quarter = document.querySelector('select[name="quarter"]').value;
                    const yearQuarter = document.querySelector('input[name="year_quarter"]').value;
                    const start = document.querySelector('input[name="start_date"]').value;
                    const end = document.querySelector('input[name="end_date"]').value;

                    const errorMsg = validateFilter(filterType, {
                        month,
                        year,
                        quarter,
                        yearQuarter,
                        start,
                        end
                    });
                    if (errorMsg) {
                        e.preventDefault();
                        showError(errorMsg);
                        return;
                    }
                });
            });
        </script>
    @endsection
